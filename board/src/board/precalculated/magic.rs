use lazy_static::lazy_static;

use marvk_chess_core::constants::piece::Piece;
use marvk_chess_core::constants::square::Square;

use crate::board::constants::SquareShiftBits;
use crate::board::precalculated::magic::generator::{Configuration, ConfigurationGenerator};

mod generator;

pub struct Magics([Configuration; 64]);

lazy_static! {
    pub static ref ROOK_MAGICS: Magics = Magics::new(Piece::ROOK, Magics::ROOK_MAGICS);
}

lazy_static! {
    pub static ref BISHOP_MAGICS: Magics = Magics::new(Piece::BISHOP, Magics::BISHOP_MAGICS);
}

impl Magics {
    const BISHOP_MAGICS: [u64; 64] = [
        54188608189382912, 1396296206707408896, 6199055180890120, 2825753536241664, 9260531269400790080, 576755558925731984, 2378188194532824065, 602575455979520,
        1495204009965912128, 75470482459623680, 54047627968790528, 2450314460565340162, 1152961104759226496, 283678364142101, 361559293667352576, 10414713792126976,
        594510369679016960, 4652218552550818880, 793834682155401794, 9225629473846607873, 2814835700662273, 2346656889477071184, 577590165636270081, 9077570180124683,
        1161093473374212, 1143494783077632, 2882343344338387972, 1126179549544450, 292736724625294337, 40618162865078816, 2307532413191882756, 3396992730677505,
        4613973024089589761, 36171939692687377, 2324042142861230240, 180181370638172288, 76773400483463232, 1134730628203552, 580967240300823553, 4904703676796403785,
        9260531269400790080, 36592374172000512, 2452220734555099136, 2450099072619516164, 324294375058187585, 10487144086899457, 45220716384092416, 4613975837367631938,
        2378188194532824065, 36592374172000512, 282646446874694, 36028797566845088, 1441151933645324320, 5188208687247819265, 54047627968790528, 1396296206707408896,
        602575455979520, 10414713792126976, 9225659179959128064, 288266266148602885, 405364653225681924, 1126175376425216, 1495204009965912128, 54188608189382912
    ];
    const ROOK_MAGICS: [u64; 64] = [
        252201717645448328, 666537418043695105, 2449993932256315456, 144132799056583168, 2449964794494590988, 72066394427098112, 144116289875739136, 144115327680135684,
        9223512775417929856, 38351034315178048, 703824889712640, 598415912168611920, 324399945019031680, 14074066665474224, 198299129682657408, 2450521153721139396,
        11673365968343533696, 576602041158221826, 4504151532765200, 9297682534515085312, 1172137669459775744, 1134700832768004, 9223376435037769745, 36030996046446860,
        2322213655445537, 1170940855217824000, 9232388033277329472, 72066392283676801, 11529778038971830304, 14074066665474224, 1153071055368228865, 5480934081413792004,
        3675043673726259332, 2382404340422803521, 9799850383500124163, 576619101313574912, 8798248911872, 6896145527735296, 2535684334159888, 72343468302663809,
        3476797076839890944, 4936160833585037312, 9376529612856688656, 9024795805024264, 288511919982182420, 4647785253447401732, 73333371140571202, 144116984513691659,
        9223512775417929856, 70395051934080, 9232388033277329472, 1190164169039577216, 578712862495637632, 182958769560360448, 2378059010369756160, 144116289875739136,
        4724558240564658690, 4724558240564658690, 448738221900033, 4612249209436155970, 1153203032331143697, 1166713812867612673, 576759843105409036, 288230692435954434
    ];

    fn new(piece: Piece, magics: [u64; 64]) -> Self {
        Square::SQUARES.iter().enumerate().map(|(index, &square)| { ConfigurationGenerator::new(piece, square).generate_all_attacks_with_magic(magics[index]) }).collect::<Vec<_>>().try_into().map(Self).unwrap()
    }

    #[inline(always)]
    pub fn get_attacks(&self, square: SquareShiftBits, occupancy: u64) -> u64 {
        self.0[square as usize].get_attacks(occupancy)
    }
}


#[cfg(test)]
mod tests {
    use marvk_chess_core::constants::piece::Piece;
    use marvk_chess_core::constants::square::Square;

    use crate::board::precalculated::magic::generator::{ConfigurationGenerator};

    #[test]
    #[ignore]
    fn generate_magics() {
        let rook_magics: [u64; 64] = Square::SQUARES.iter().map(|&square| { ConfigurationGenerator::new(Piece::ROOK, square).generate_all_attacks().magic }).collect::<Vec<_>>().try_into().unwrap();
        let bishop_magics: [u64; 64] = Square::SQUARES.iter().map(|&square| { ConfigurationGenerator::new(Piece::BISHOP, square).generate_all_attacks().magic }).collect::<Vec<_>>().try_into().unwrap();

        println!("const BISHOP_MAGICS: [u64; 64] = {:?};", bishop_magics);
        println!("const ROOK_MAGICS: [u64; 64] = {:?};", rook_magics);
    }
}
